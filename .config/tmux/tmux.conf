
# ===  General settings  ===
# ==========================

set -s escape-time 0

set -sa terminal-features ',*:RGB'
set -g default-terminal 'screen-256color'
# set -g default-terminal "xterm-256color"
# set-option -ga terminal-overrides ",xterm-256color:Tc"

set -g history-limit 200000
set -g buffer-limit 2000
set -sg escape-time 0
set -g display-time 1500
set -g remain-on-exit off
set -g repeat-time 1000
set -g renumber-windows on
setw -g allow-rename off
setw -g automatic-rename off
setw -g aggressive-resize on

# Change prefix key to C-a, easier to type, same to "screen"
unbind C-a
# set -g prefix C-a
# bind C-a send-prefix
unbind C-b

unbind `
set -g prefix `
bind ` send-prefix

# clear both screen and history
unbind -T copy-mode C-k
bind C-k send-keys C-l \; run 'sleep 0.1;' \; clear-history
# CMD-k support from iterm
# 0x32 0x1b 0x4f 0x50
bind-key -T root F2 send-keys C-l \; run 'sleep 0.1' \; clear-history

# Set parent terminal title to reflect current window in tmux session 
set -g set-titles on
set -g set-titles-string "#I:#W"

# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
setw -g pane-base-index 1

# Enable mouse support
set -g mouse on
# Sane scrolling
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# ==========================
# ===   Key bindings     ===
# ==========================

# resurrect
set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'

# Use vim keybindings in copy mode
setw -g mode-keys vi

unbind M-Up
bind -n M-Up copy-mode

bind P paste-buffer

bind -T copy-mode-vi v send-keys -X begin-selection

unbind -T copy-mode-vi y
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'

unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe 'reattach-to-user-namespace pbcopy' \; send -X clear-selection

# Edit configuration and reload
unbind -T copy-mode-vi C-e
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.config/tmux/tmux.conf && tmux source ~/.config/tmux/tmux.conf && tmux display \"Config reloaded\"'"

# Reload tmux configuration
bind C-r source-file ~/.config/tmux/tmux.conf \; display "Config reloaded"
# bind R source-file ~/.tmux.conf \; display-message "Config reloaded..."

# new window and retain cwd
# bind c new-window -c "#{pane_current_path}"

# Prompt to rename window right after it's created
# set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
# bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
# bind | split-window -h -c "#{pane_current_path}"
# bind _ split-window -v -c "#{pane_current_path}"

# Select pane and windows
# bind -r [ previous-window
# bind -r ] next-window

# Use Alt-arrow keys without prefix key to switch panes
# unbind C-Left
# bind -n C-Left select-pane -L
# bind -n C-Right select-pane -R
# bind -n C-Up select-pane -U
# bind -n C-Down select-pane -D
bind h select-pane -L 
bind l select-pane -R
bind j select-pane -D
bind k select-pane -U

bind -n S-Left  previous-window
bind -n S-Right next-window

bind -n C-S-Left swap-window -t -1 \; previous-window
bind -n C-S-Right swap-window -t +1 \; next-window

# setenv KUBECONFIG ~/.kube/config

bind -r 0 new -e I=0 -As0
bind -r 1 new -e I=1 -As1 
bind -r 2 new -e I=2 -As2
bind -r 3 new -e I=3 -As3
bind -r 4 new -e I=4 -As4
bind -r 5 new -e I=5 -As5
bind -r 6 new -e I=6 -As6
bind -r 7 new -e I=7 -As7
bind -r 8 new -e I=8 -As8
bind -r 9 new -e I=9 -As9

# bind -r [ select-pane -t :.-
# bind -r ] select-pane -t :.+
# bind -r Tab last-window   # cycle thru MRU tabs
# bind -r C-o swap-pane -D


# Zoom pane
# bind + resize-pane -Z

# Link window
# bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
# bind \ if '[ #{pane_index} -eq 1 ]' \
#      'swap-pane -s "!"' \
#      'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Kill pane/window/session shortcuts
# bind x kill-pane
# bind X kill-window
# bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
# bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
# bind C-u command-prompt -p "Session to merge with: " \
#    "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
# bind d detach
# bind D if -F '#{session_many_attached}' \
#     'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
#     'display "Session has only 1 client attached"'

# Toggle status bar
unbind m
bind C-m set-option status

set -g status-keys vi


# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
# bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
# bind M if -F '#{monitor-silence}' \
#     'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
#     'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Activity bell and whistles
set -g visual-activity off

# TODO: Does not work as well, check on newer versions
# set -g visual-silence on

# BUG: bell-action other ignored · Issue #1027 · tmux/tmux · GitHub - https://github.com/tmux/tmux/issues/1027
# set -g visual-bell on
# setw -g bell-action other

# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================
# set -g @copy_use_osc52_fallback on

# Prefer vi style key table
# setw -g mode-keys vi

# bind p paste-buffer
# bind C-p choose-buffer

# trigger copy mode by
bind -n M-Up copy-mode

# Scroll up/down by 1 line, half screen, whole screen
# bind -T copy-mode-vi M-Up              send-keys -X scroll-up
# bind -T copy-mode-vi M-Down            send-keys -X scroll-down
# bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
# bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
# bind -T copy-mode-vi PageDown          send-keys -X page-down
# bind -T copy-mode-vi PageUp            send-keys -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
# bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
# bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# wrap default shell in reattach-to-user-namespace if available
# there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
# if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
#     "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"

# yank="~/.tmux/yank.sh"

# Copy selected text
# bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
# bind -T copy-mode-vi Y send-keys -X copy-line \;\
#     run "tmux save-buffer - | $yank"
# bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
#     run "tmux save-buffer - | $yank"
# bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
# bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
#     run "tmux save-buffer - | $yank"

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
# bind -T copy-mode-vi MouseDragEnd1Pane \
#     send-keys -X copy-pipe "$yank"
# bind -T copy-mode-vi MouseDown1Pane select-pane \;\
#    send-keys -X clear-selection
    
# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external

# set-option -g default-command "bash --rcfile /Users/stuart.s.robinson/.oh-my-zsh/custom/kubectx.zsh"

set -g focus-events on
# set-hook -g window-pane-changed "run 'echo W ${KUBECTXTTYCONFIG} >> /tmp/focus'"
# set-hook -g pane-focus-in "run 'echo I ${KUBECTXTTYCONFIG} >> /tmp/focus'"
# set-hook -g pane-focus-out "run 'echo O ${KUBECTXTTYCONFIG} >> /tmp/focus'"
# set-hook -g pane-focus-out "run 'echo O #{pane_id} $(date) >> /tmp/focus'"

# =====================================
# ===           Theme               ===
# =====================================

# Feel free to NOT use this variables at all (remove, rename)
# this are named colors, just for convenience
color_orange="colour166" # 208, 166
color_purple="colour134" # 135, 134
color_green="colour076" # 070
color_blue="colour39"
color_yellow="colour220"
color_red="colour160"
color_black="colour232"
color_white="white" # 015

# This is a theme CONTRACT, you are required to define variables below
# Change values, but not remove/rename variables itself
color_dark="$color_black"
color_light="$color_white"
color_session_text="$color_blue"
color_status_text="colour245"
color_main="$color_orange"
color_secondary="$color_purple"
color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"

# =====================================
# ===    Appearence and status bar  ===
# ======================================

# set -g mode-style "fg=default,bg=$color_main"
# 
# # command line style
# set -g message-style "fg=$color_main,bg=$color_dark"
# 
# # status line style
# set -g status-style "fg=$color_status_text,bg=$color_dark"
# 
# # window segments in status line
# set -g window-status-separator ""
# separator_powerline_left=""
# separator_powerline_right=""
# 
# # setw -g window-status-style "fg=$color_status_text,bg=$color_dark"
# setw -g window-status-style "fg=$color_status_text,bg=$color_dark"
# setw -g window-status-format " #I:#W "
# setw -g window-status-current-style "fg=$color_light,bold,bg=$color_main"
# setw -g window-status-current-format "#[fg=$color_dark,bg=$color_main]$separator_powerline_right#[default] #I:#W# #[fg=$color_main,bg=$color_dark]$separator_powerline_right#[default]"
# 
# # when window has monitoring notification
# setw -g window-status-activity-style "fg=$color_main"
# 
# # outline for active pane
# setw -g pane-active-border-style "fg=$color_main"
# 
wg_kube="#(/bin/bash $HOME/.config/tmux/plugins/kube.tmux 250 color214 cyan #S)"
wg_session="#[fg=$color_session_text] #S #[default]"
wg_is_zoomed="#[fg=$color_yellow]#{?window_zoomed_flag,[Z],[z]}#[default]"

# 
# # general status bar settings
# set -g status on

set -g status-interval 5
set -s escape-time 0

# set -g status-position top
# set -g status-justify left
# set -g status-right-length 100
# set -g status-left "$wg_session"



## COLORSCHEME: gruvbox dark (medium)
# set -g @plugin 'egel/tmux-gruvbox'
# set -g @tmux-gruvbox 'dark'

set-option -g status "on"

# default statusbar color
set-option -g status-style bg=colour237,fg=colour223 # bg=bg1, fg=fg1

# default window title colors
set-window-option -g window-status-style bg=colour214,fg=colour237 # bg=yellow, fg=bg1

# default window with an activity alert
set-window-option -g window-status-activity-style bg=colour237,fg=colour248 # bg=bg1, fg=fg3

# active window title colors
set-window-option -g window-status-current-style bg=red,fg=colour237 # fg=bg1

# pane border
set-option -g pane-active-border-style fg=colour250 #fg2
set-option -g pane-border-style fg=colour237 #bg1

# message infos
set-option -g message-style bg=colour239,fg=colour223 # bg=bg2, fg=fg1

# writing commands inactive
set-option -g message-command-style bg=colour239,fg=colour223 # bg=fg3, fg=bg1

# pane number display
set-option -g display-panes-active-colour colour250 #fg2
set-option -g display-panes-colour colour237 #bg1

# clock
set-window-option -g clock-mode-colour colour109 #blue

# bell
set-window-option -g window-status-bell-style bg=colour167,fg=colour235 # bg=red, fg=bg

## Theme settings mixed with colors (unfortunately, but there is no cleaner way)
set-option -g status-justify "left"
set-option -g status-position top
set-option -g status-left-style none
set-option -g status-left-length "80"
set-option -g status-right-style none
set-option -g status-right-length "80"
set-window-option -g window-status-separator ""

session_0_selected="#{?#{==:#S,0},colour233,colour241}"
session_1_selected="#{?#{==:#S,1},colour233,colour241}"
session_2_selected="#{?#{==:#S,2},colour233,colour241}"
session_3_selected="#{?#{==:#S,3},colour233,colour241}"
session_4_selected="#{?#{==:#S,4},colour233,colour241}"
session_5_selected="#{?#{==:#S,5},colour233,colour241}"
session_6_selected="#{?#{==:#S,6},colour233,colour241}"
session_7_selected="#{?#{==:#S,7},colour233,colour241}"
session_8_selected="#{?#{==:#S,8},colour233,colour241}"
session_9_selected="#{?#{==:#S,9},colour233,colour241}"

set-option -g status-left "#[bg=${session_0_selected},fg=colour248] 0 #[bg=${session_1_selected},fg=colour248] 1 #[bg=${session_2_selected},fg=colour248] 2 #[bg=${session_3_selected},fg=colour248] 3 #[bg=${session_4_selected},fg=colour248] 4 #[bg=${session_5_selected},fg=colour248] 5 #[bg=${session_6_selected},fg=colour248] 6 #[bg=${session_7_selected},fg=colour248] 7 #[bg=${session_8_selected},fg=colour248] 8 #[bg=${session_9_selected},fg=colour248] 9 #[bg=colour237,fg=colour241,nobold,noitalics,nounderscore]"
# sset-option -g status-right "#[bg=colour237,fg=colour239 nobold, nounderscore, noitalics]#[bg=colour239,fg=colour246] %Y-%m-%d  %H:%M #[bg=colour239,fg=colour248,nobold,noitalics,nounderscore]#[bg=colour248,fg=colour237] #h "
set-option -g status-right "#{prefix_highlight} $wg_kube $wg_is_zoomed"

set-window-option -g window-status-current-format "#[bg=colour214,fg=colour237,nobold,noitalics,nounderscore]#[bg=colour214,fg=colour239] #I #{?window_zoomed_flag,*Z,}"
set-window-option -g window-status-format "#[bg=colour239,fg=colour237,noitalics]#[bg=colour239,fg=colour248] #I #[bg=colour237,fg=colour239,noitalics]"

# vim: set ft=tmux tw=0 nowrap:












# =====================================
# ===        Renew environment      ===
# =====================================
set -g update-environment \
  "DISPLAY\
  KUBECONFIG\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind '$' run "~/.tmux/renew_env.sh"


# ============================
# ===       Plugins        ===
# ============================
set -g @open-S 'https://www.google.com/search?q='
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tpm'

set -g @sidebar-tree 't'
set -g @sidebar-tree-command 'tree -C'
set -g @sidebar-tree-focus 'T'


# ==============================================
# ===   Nesting local and remote sessions     ===
# ==============================================

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S

# Run all plugins' scripts
run '~/.config/tmux/plugins/tpm/tpm'


